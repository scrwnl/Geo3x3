関数: 切り捨て(実数: 数) => (整数: 結果) {
  整数: 整数部 = 数;
  実数: 小数部 = 数 - 整数部;
  結果 = 数 - 小数部;
}

関数: エンコード(実数: 緯度, 実数: 経度, 整数: レベル) => (文字列: Geo3x3) {
  Geo3x3 = "E";
  もし (経度 < 0.0) ならば {
    Geo3x3 = "W";
    経度 += 180.0;
  }
  緯度 += 90.0;
  実数: 単位 = 180.0;
  (整数: カウンタ = 1;) から (カウンタ == レベル) まで (カウンタ++;) {
    単位 /= 3.0;
    整数: 横 = 切り捨て(経度 / 単位);
    整数: 縦 = 切り捨て(緯度 / 単位);
    Geo3x3 += 横 + 縦 * 3 + 1;
    経度 -= 横 * 単位;
    緯度 -= 縦 * 単位;
  }
}
関数: デコード(文字列: Geo3x3) => (配列<実数>: 結果) {
  整数: フラグ = 0;
  整数: はじまり = 0;
  文字列: 先頭文字 = Geo3x3.切り取り(0, 1);
  もし (先頭文字 == "W") ならば {
    フラグ = 1;
    はじまり = 1;
  } でなければ {
    もし (先頭文字 == "E") ならば {
      はじまり = 1;
    }
  }
  実数: 単位 = 180.0;
  実数: 緯度 = 0.0;
  実数: 経度 = 0.0;
  整数: レベル = 1;
  (整数: カウンタ = はじまり;) から (カウンタ == Geo3x3.長さ) まで (カウンタ++;) {
    整数: N = Geo3x3.切り取り(カウンタ, カウンタ + 1).整数変換();
    単位 /= 3;
    N--;
    経度 += (N % 3) * 単位;
    緯度 += 切り捨て(N / 3) * 単位;
    レベル++;
  }
  緯度 += 単位 / 2;
  経度 += 単位 / 2;
  緯度 -= 90.0;
  もし (フラグ == 1) ならば {
    経度 -= 180.0;
  }
  結果.追加(緯度);
  結果.追加(経度);
  結果.追加(レベル);
  結果.追加(単位);
}

関数: 実行() => (){
  表示(エンコード(35.65858, 139.745433, 14));
  配列<実数>: 結果 = デコード("E9139659937288");
  表示(結果.取得(0));
  表示(結果.取得(1));
  表示(結果.取得(2));
  表示(結果.取得(3));
}
